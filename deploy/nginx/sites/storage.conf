server {

	set $public_directory   /data/storage-public;

	listen 443 ssl http2;
	server_name storage;

	charset utf-8;

	# path to your certs
	ssl_certificate      /etc/nginx/ssl/storage.keychain.crt;
	ssl_certificate_key  /etc/nginx/ssl/storage.key;
	ssl_session_timeout 1d;

	# Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
	ssl_dhparam /etc/nginx/ssl/dhparam.pem;

	# intermediate configuration. tweak to your needs.
	ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers               ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;
	ssl_prefer_server_ciphers on;

	# HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
	add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";

	# OCSP Stapling ---
	# fetch OCSP records from URL in ssl_certificate and cache them
	ssl_stapling on;
	ssl_stapling_verify on;

	## verify chain of trust of OCSP response using Root CA and Intermediate certs
	ssl_trusted_certificate /etc/nginx/ssl/ca-keychain.pem;

	# letsencrypt renewal path
	location ~ /.well-known {
		root /etc/nginx/ssl/letsencrypt;
		auth_basic "off";
		allow all;
	}

	# content-type fixes
	location ~ ^\/v1\/files\/([^\/]+)/small {
		more_set_headers "Content-Type: image/jpg";
		alias /data/storage/small/$1.jpg;
	}

	# this goes to node, everything else is static file serving
	location /v1 {

		client_max_body_size 500M;
		more_set_headers "Cache-Control: private,max-age=0,no-cache,no-store";

		# reverse proxy settings
		proxy_pass http://localhost:3000/storage/v1;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection 'upgrade';
		proxy_set_header Host $host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_cache_bypass $http_upgrade;

		# logs
		error_log /var/log/nginx/storage-error.log;
		access_log /var/log/nginx/storage-access.log;

		# CORS
		if ($http_origin ~* ((https://.*\.vpdb\.io(:[0-9]+)?$)|(https?://localhost(:[0-9]+)?$))) {
			set $cors "1";
		}
		# pre-flight request (wtf syntax because nginx can't do AND conditions in IFs)
		if ($request_method = 'OPTIONS') {
			set $cors "${cors}o";
		}
		if ($cors = "1") {
			more_set_headers "Access-Control-Allow-Origin: $http_origin";
			more_set_headers "Access-Control-Allow-Credentials: true";
			more_set_headers "Access-Control-Allow-Headers: $cors_allow_headers";
			more_set_headers "Access-Control-Allow-Methods: $cors_allow_methods";
			more_set_headers "Access-Control-Expose-Headers: $cors_expose_headers";
		}
		if ($cors = "1o") {
			more_set_headers "Access-Control-Allow-Origin: $http_origin";
			more_set_headers "Access-Control-Allow-Credentials: true";
			more_set_headers "Access-Control-Allow-Headers: $cors_allow_headers";
			more_set_headers "Access-Control-Allow-Methods: $cors_allow_methods";
			more_set_headers "Access-Control-Expose-Headers: $cors_expose_headers";
			more_set_headers "Access-Control-Max-Age: 10";
			more_set_headers "Content-Type: text/plain";
			more_set_headers "Content-Length: 0";
			return 204;
		}
	}

	# map public assets
	location /public/files {
		alias $public_directory;
		access_log off;
		more_set_headers "Cache-Control: no-transform,public,max-age=2592000";
		etag on;
	}
}

# redirect to https
server {
	listen 80;
	server_name storage;
	return 301 https://storage$request_uri;
}