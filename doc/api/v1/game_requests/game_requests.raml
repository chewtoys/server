displayName: Game Requests
description: |
  Since games are maintained by the VPDB staff, users can request games to be
  added to the database.

post:
  is: [ validated ]
  securedBy: [ jwt: { scopes: [ MEMBER ] } ]
  description: |
    Create a new game request.

    IPDB data is fetched in realtime and the game title is returned.

  body:
    role/member:
      example: !include http/create-req.json
  responses:
    201:
      body:
        role/member:
          example: !include http/create-res-201.json
    422:
      body:
        role/member:
          example: !include http/create-res-422.json

get:
  securedBy: [ jwt: { scopes: [ CONTRIB, MODERATOR ] } ]
  description: |
    List all game requests.

    Per default, only open requests are returned. See `status` parameter
    for other filters.

  queryParameters:
    status:
      description: |
        Which requests to return. One of the following:

        - `open` (default) - Only return open requests
        - `closed` - Only list closed requests, including denied
        - `denied` - Only list denied requests
        - `all` - List all entities
      required: false
      type: string
      example: closed

/{game_request_id}:
  patch:
    is: [ protected ]
    securedBy: [ jwt: { scopes: [ MEMBER, MODERATOR ] } ]
    description: |
      Update a game request.

      The goal of this is to close an invalid game request without adding the
      game. This can happen if a user requests another edition of a game
      already added, which would have another IPDB number and therefore would
      not have been blocked by the game request validations.

      Note that when closing, the `message` attribute must be provided.

    body:
        role/member:
          example: !include http/update-req.json
    responses:
      200:
        body:
          role/member:
            example: !include http/update-res-200.json

  delete:
    is: [ protected ]
    securedBy: [ jwt: { scopes: [ MEMBER, MODERATOR ] } ]
    description: |
      Delete a game request of a given ID.

      Members can only delete own game requests, while moderators can delete any medium.
    body:
        role/member:
          example: !include http/del-req.json
    responses:
      200:
        body:
          role/member:
            example: !include http/del-res-204.json
      403:
        body:
          role/member:
            example: !include http/del-res-403.json