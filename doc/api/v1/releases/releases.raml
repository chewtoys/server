displayName: Releases
description: !include releases.md
post:
  is: [ validated ]
  securedBy: [ jwt: { scopes: [ MEMBER ] } ]
  description: |
    Create a new release.

    Note that prior to that request, files and media need to be uploaded so it
    can be referenced.
  body:
    role/member:
      schema: release
      example: !include http/create-req.json
  responses:
    201:
      body:
        role/member:
          schema: release
          example: !include http/create-res-201.json
get:
  securedBy: [ ]
  is: [ paginated: { defaultPerPage: 12, maxPerPage: 60 }, sorted ]
  description: |
    List all releases.

    When listing, only latest version of the release is returned. However,
    we also want all flavor combinations, so if a flavor that is not available
    in the latest version, it will be nevertheless returned.

    In short, `versions` is an array where files with updated flavors are
    omitted.

    ### Filtering

    Releases can be filtered by different attributes. See request parameters.

    ### Sorting

    The result can be sorted by the following fields:

    * `modified_at` *default* - Last date the release was modified. Comments,
      ratings and stars don't count as modifications.
    * `name` - Name of the release
    * `popularity` - A score depending on downloads, comments and stars.
    * `rating` - The [Bayesian estimate](https://en.wikipedia.org/wiki/Bayes_estimator)
      of the games' ratings
    * `num_downloads` - Number of downloads of the release
    * `num_comments` - Number of comments of the release
    * `num_stars` - Number of stars of the release

  queryParameters:
    q:
      description: |
        Search query.

        Searches in release name and game name.
      required: false
      type: string
      example: addams
    ids:
      description: |
        Only display releases with given IDs.

        This is useful if you have an existing list of releases for which you
        want to retrieve updated data.

        IDs are separated by comma.
      required: false
      type: string
      example: V1mNPyWjh,EJef4v1Wi3
    tags:
      description: |
        Filters result by tag ID.

        You can provide multiple tags separated by comma. In that case, only
        releases that match all tags are returned.
      required: false
      type: string
      example: hd,wip
    builds:
      description: |
        Filters result by compatible VP builds.

        You can provide multiple builds separated by comma. In that case,
        releases that match at least one build are returned.
      required: false
      type: string
      example: 9.9.0,physmod5
    flavor:
      description: |
        Filters releases by flavor.

        The flavor is provided in key/value pairs, where pairs are comma
        separated and key/value with a colon.

        In order to be matched, a release must have a least one version with
        at least one file with the given flavor.

        Note that if provided, this filter will not only filter the releases but
        also files to match the provided flavor.
      required: false
      type: string
      example: orientation:fs,lighting:day
    starred:
      description: |
        Only lists starred releases.

        You can just provide `starred` without any value. However, if you
        provide `false`, then only non-starred releases will be returned.

        Also note that you need to be logged if you provide this parameter,
        otherwise `401 Unauthorized` will be returned.
      required: false
      type: boolean
      example: true
    filesize:
      description: |
        Only lists releases which contain a file with given size in bytes.

        This is useful for matching local table files with releases at VPDB.
        See also `threshold`.
      required: false
      type: number
      example: 68820992
    threshold:
      description: |
        Sets a threshold when using `filesize`.

        When set to `X`, files with size between `X` - `filesize` and `X` +
        `filesize` are returned.
      required: false
      type: number
      example: 100

    thumb_flavor:
      description: |
        Sets a preference which flavor of the thumbnail is returned.

        This is due to media URLs taking up quite some space, while usually
        only one URL is actually needed when fetching a list of releases.

        The flavor is provided in key/value pairs, where pairs are comma
        separated and key/value with a colon. If the selected flavor doesn't
        exist or is not provided, the default flavor (day / fullscreen) is
        returned.

        Note that the order in which the flavors are provided is decisive in
        stand-off situations where only one pair matches, e.g. fullscreen/night
        would win against widescreen/day if `orientation:fs,lighting:day` is
        provided.

      required: false
      type: string
      example: orientation:fs,lighting:day
    thumb_format:
      description: |
        Sets a preference which format of the thumbnail is returned with the
        release.

        Possible values: `medium`, `medium-2x`, `medium-landscape`,
        `medium-landscape-2x`, `square`, `square-2x`.

        If not provided or invalid, the URL of the original media is returned.
      required: false
      type: string
      example: square
    thumb_full_data:
      description: |
        If provided, additionally returns `mime_type`, `bytes` and
        `file_type` for each thumb.
      required: false
      type: boolean
      example: true
  body:
    role/anon:
      example: !include http/list-req.json
  responses:
    200:
      body:
        role/member:
          example: !include http/list-res-200.json
    401:
      description: |
        When retrieving starred releases, the user must be logged, otherwise
        `401 Unauthorized` is returned.
      body:
        role/member:
          example: !include http/list-res-401.json

/{release_id}:
  uriParameters:
    release_id:
      displayName: Release ID
      type: string

  get:
    securedBy: [ ]
    description: |
      List details of a given release.
    queryParameters:
      thumb_flavor:
        description: |
          Adds an additional `thumb` property to the root of the release object
          containing the given flavor if available.

          The flavor is provided in key/value pairs, where pairs are comma
          separated and key/value with a colon. If the selected flavor doesn't
          exist or is not provided, the default flavor (day / fullscreen) is
          returned.

          Note that the order in which the flavors are provided is decisive in
          stand-off situations where only one pair matches, e.g. fullscreen/night
          would win against widescreen/day if `orientation:fs,lighting:day` is
          provided.

        required: false
        type: string
        example: orientation:fs,lighting:day
      thumb_format:
        description: |
          Adds an additional `thumb` property to the root of the release object
          containing the given flavor if available.

          Possible values: `medium`, `medium-2x`, `medium-landscape`,
          `medium-landscape-2x`, `square`, `square-2x`.

          If not provided or invalid, the URL of the original media is returned.
        required: false
        type: string
        example: square
    body:
        role/anon:
          example: !include http/view-req.json
    responses:
      200:
        body:
          role/member:
            example: !include http/view-res-200.json

  delete:
    is: [ protected ]
    securedBy: [ jwt: { scopes: [ CONTRIBUTOR ] } ]
    description: |
      Delete a release of a given ID.

      Note that deleting releases is only possible in the first 24 hours after
      creation.
    responses:
      401:
        body:
          role/anon:
            example: !include http/del-res-401.json

  /versions:
    post:
      is: [ validated ]
      securedBy: [ jwt: { scopes: [ MEMBER ] } ]
      description: |
        Add a new version to an existing release.

        Note that prior to that request, files and media need to be uploaded so
        it can be referenced.
      body:
        role/member:
          example: !include http/create-version-req.json
      responses:
        201:
          body:
            role/member:
              example: !include http/create-version-res-201.json
        422:
          body:
            role/member:
              example: !include http/create-version-res-422.json
        403:
          description: A user who is not author of the release posted a new version
          body:
            role/member:
              example: !include http/create-version-res-403.json

    /{version}:
      uriParameters:
        version:
          displayName: Version ID
          type: string
      put:
        is: [ validated ]
        securedBy: [ jwt: { scopes: [ MEMBER ] } ]
        description: |
          Update an existing version of a release.

          Provided files wil be *added* to the version. It's not possible to
          delete files. It's also the only field looked at at the moment.

          Note that prior to that request, files and media need to be uploaded
          so it can be referenced.
        body:
          role/member:
            example: !include http/update-version-req.json
        responses:
          201:
            body:
              role/member:
                example: !include http/update-version-res-201.json
          422:
            body:
              role/member:
                example: !include http/update-version-res-422.json
          403:
            description: A user who is not author of the release posted a new file
            body:
              role/member:
                example: !include http/update-version-res-403.json

  /comments: !include comments.raml
  /rating: !include rating.raml
  /star: !include star.raml
  /events:
      get:
        is: [ paginated: { defaultPerPage: 10, maxPerPage: 50 }, eventlog ]
        description: Retrieves all events related to the release.
        body:
          role/anon:
            example: !include ../events/http/list-release-req.json
        responses:
          200:
            body:
              role/anon:
                example: !include ../events/http/list-release-res-200.json
