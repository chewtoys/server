displayName: Profile
description: | 
  This resource is about self-managing an authenticated user's account.
get:
  is: [ protected ]
  securedBy: [ jwt: { scopes: [ MEMBER ] } ]
  description: |
    Returns authenticated user's profile.

    Contrarily to `/users/{user_id}`, this also contains all resolved 
    permissions of the user.
  body:
    role/member:
      example: !include http/view-req.json
  responses:
    200:
      body:
        role/member:
          schema: user
          example: !include http/view-res-200.json
    401:
      body:
        role/anon:
          example: !include http/view-res-401.json

patch:
  is: [ protected ]
  securedBy: [ jwt: { scopes: [ MEMBER ] } ]
  description: |
    Updates the user's profile.

    Besides updating the user's meta data such as location and display name,
    this resource also allows changing the user's password and the creation of
    local credentials.

    ## Change Password

    In order to change the password, add the `password` property for the new
    password, along with `current_password` for your current password.

    ## Create Local Credentials

    If the user doesn't have local credentials because only third party OAuth
    authentication was used, they can be created by providing the `username`
    property, which then also requires the `password` property to be submitted.

    This results in the user being able to login locally with the created
    credentials while authentication with the third party OAuth provider
    still remains functional.

  body:
    role/member-Update-Profile:
      schema: user-update-profile
      example: !include http/update-profile-req.json
    role/member-Change-Password:
      schema: user-chpass
      example: !include http/update-password-req.json
    role/member-Create-Local-Credentials:
      schema: user-create-local
      example: !include http/update-create-local-req.json
  responses:
    200:
      body:
        role/member:
          schema: user
          example: !include http/update-profile-res-200.json
    401:
      body:
        role/anon:
          example: !include http/view-res-401.json

/logs:
  get:
    is: [ protected ]
    securedBy: [ jwt: { scopes: [ MEMBER ] } ]
    description: |
      Retrieves the user log.

      The user log keeps track of changes concerning the user.

/confirm/{token}:
  get:
    description: |
      Confirms a token.

      The token was sent by email in order to validate that the user
      is indeed owner of the provided email address.

      There are two use cases for this:

       1. Confirmation after local registration
       2. Confirmation after profile update of email address
    body:
      role/anon:
        example: !include http/confirm-token-req.json
    responses:
      200:
        body:
          role/anon:
            schema: user-token-confirmation
            example: !include http/confirm-token-res-200.json
      404:
        description: When an invalid token is provided
        body:
          role/anon-Invalid-Token:
            example: !include http/confirm-token-res-404.json
